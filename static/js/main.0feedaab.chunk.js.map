{"version":3,"sources":["Day.js","Item.js","New.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Day","props","className","id","getDay","Item","handleClick","event","index","target","value","preventDefault","removeItem","data","map","entry","key","type","onClick","name","New","useState","newItem","setItem","onChange","placeholder","autoComplete","sendData","List","socket","io","connect","App","items","setItems","Date","toLocaleDateString","weekday","day","month","useEffect","on","emit","date","item","indexRem","remove","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAEe,SAASA,EAAIC,GAExB,OACI,yBAAKC,UAAU,MAAMC,GAAG,WACpB,gCAAMF,EAAMG,OAAZ,MCJG,SAASC,EAAKJ,GAEzB,SAASK,EAAYC,GACjB,IAAMC,EAAQD,EAAME,OAAOC,MAC3BH,EAAMI,iBACNV,EAAMW,WAAWJ,GAerB,OACIP,EAAMY,KAAKC,KAbf,SAAkBC,EAAOP,GACrB,OACI,0BAAMQ,IAAKR,GACX,yBAAKN,UAAU,QACX,2BAAOe,KAAK,WAAWP,MAAOF,EAAOU,QAASZ,EAAaa,KAAK,aAChE,2BAAIJ,QCbL,SAASK,EAAInB,GAAO,IAAD,EAEHoB,mBAAS,IAFN,mBAEvBC,EAFuB,KAEdC,EAFc,KAmB9B,OACI,0BAAMrB,UAAU,QACZ,2BAAOe,KAAK,OAAOO,SAjB3B,SAAsBjB,GAClB,IAAMM,EAAON,EAAME,OAAOC,MAC1Ba,EAAQV,IAeuCH,MAAOY,EAASG,YAAY,WAAWC,aAAa,QAC/F,4BAAQT,KAAK,SAASC,QAb9B,SAAqBX,GACjBA,EAAMI,iBACS,KAAZW,GAGCrB,EAAM0B,SAASL,GAEnBC,EAAQ,MAMJ,MCpBG,SAASK,EAAK3B,GAEzB,OACI,yBAAKC,UAAU,OACX,kBAACG,EAAD,CACIQ,KAAMZ,EAAMY,KACZD,WAAYX,EAAMW,aAEtB,kBAACQ,EAAD,CAAKO,SAAU1B,EAAM0B,YCNjC,IAAME,E,OAASC,EAAGC,QAAQ,8CAEX,SAASC,IAAO,IAAD,EAEFX,mBAAS,IAFP,mBAErBY,EAFqB,KAEdC,EAFc,KAI5B,SAAS9B,IAWP,OATc,IAAI+B,MAQDC,mBAAmB,QANpB,CACdC,QAAS,OACTC,IAAK,UACLC,MAAO,SAmCX,OA1BAC,qBAAU,WAERX,EAAOY,GAAG,SAAS,SAAC5B,GAElBqB,EAASrB,QAGX,IAqBA,6BACE,kBAACb,EAAD,CAAKI,OAAQA,MACb,kBAACwB,EAAD,CACED,SAtBN,SAAkBd,GAEhBgB,EAAOa,KAAK,MAAO,CACjBC,KAAMvC,IACNwC,KAAM/B,KAmBJD,WAdN,SAAoBiC,GAClB,IAAIC,EAASb,EAAMc,QAAO,SAASH,GACjC,OAAOX,EAAMY,KAAcD,KAG7Bf,EAAOa,KAAK,SAAUI,IAUlBjC,KAAMoB,KCjDMe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACvB,EAAD,OAEFwB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0feedaab.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Day(props){\r\n\r\n    return (\r\n        <div className=\"box\" id=\"heading\">\r\n            <h1> {props.getDay} </h1>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport default function Item(props){\r\n\r\n    function handleClick(event){\r\n        const index = event.target.value;\r\n        event.preventDefault();\r\n        props.removeItem(index);\r\n    }\r\n\r\n    function showList(entry, index){\r\n        return (\r\n            <form key={index}>\r\n            <div className=\"item\">\r\n                <input type=\"checkbox\" value={index} onClick={handleClick} name=\"checkbox\"></input>\r\n                <p>{entry}</p> \r\n            </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n\r\n    return (    \r\n        props.data.map(showList)\r\n    );\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function New(props){\r\n\r\n    const [newItem, setItem] = useState(\"\");\r\n\r\n    function handleChange(event){\r\n        const data = event.target.value;\r\n        setItem(data);\r\n    }\r\n\r\n    function handleClick(event){\r\n        event.preventDefault();\r\n        if(newItem === \"\"){\r\n\r\n        }else{\r\n            props.sendData(newItem);\r\n        }\r\n        setItem(\"\");\r\n    }\r\n\r\n    return (\r\n        <form className=\"item\">\r\n            <input type=\"text\" onChange={handleChange} value={newItem} placeholder=\"New Item\" autoComplete=\"off\"></input>\r\n            <button type=\"submit\" onClick={handleClick}>+</button>\r\n        </form>\r\n    );\r\n}","import React from \"react\";\r\nimport Item from \"./Item\";\r\nimport New from \"./New\";\r\n\r\nexport default function List(props){\r\n\r\n    return (\r\n        <div className=\"box\">\r\n            <Item \r\n                data={props.data}\r\n                removeItem={props.removeItem}\r\n            />\r\n            <New sendData={props.sendData}/>\r\n       </div>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport Day from \"./Day\";\nimport List from \"./List\";\n\n//main socket connection\nconst socket = io.connect('https://honest-toonie-33810.herokuapp.com/')\n\nexport default function App() {\n\n  const [items, setItems] = useState([]);\n\n  function getDay() {\n\n    const today = new Date();\n  \n    const options = {\n      weekday: \"long\",\n      day: \"numeric\",\n      month: \"long\"\n    };\n  \n    let date = today.toLocaleDateString(\"en-Ph\", options);\n    return date;\n  \n};\n\n  //Listener\n  useEffect(function(){\n    //reply for logging in\n    socket.on('items', (data) => {\n      //message received\n      setItems(data);\n    })\n    \n  },[])\n\n  function saveData(data){\n\n    socket.emit('new', { \n      date: getDay(), \n      item: data\n    });\n\n  }\n\n  function removeItem(indexRem){\n    let remove = items.filter(function(item){\n      return items[indexRem] === item;\n    })\n    \n    socket.emit('remove', remove);\n  }\n\n  return (\n\n    <div>\n      <Day getDay={getDay()}/>\n      <List \n        sendData={saveData}\n        removeItem={removeItem}\n        data={items}\n      />\n    </div>\n\n  );\n  \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}